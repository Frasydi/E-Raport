# Multi-stage build for better Prisma handling
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache openssl libc6-compat curl

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install all dependencies (including devDependencies for Prisma CLI)
RUN npm ci

# Generate Prisma client
RUN npx prisma generate

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache openssl libc6-compat curl

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

# Copy package files and install production dependencies
COPY --chown=nodejs:nodejs package*.json ./
RUN npm ci --omit=dev && npm cache clean --force

# Copy Prisma client from build stage
COPY --from=base --chown=nodejs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=base --chown=nodejs:nodejs /app/node_modules/@prisma ./node_modules/@prisma

# Copy application code
COPY --chown=nodejs:nodejs . .

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Start application
CMD ["npm", "start"]
