generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  Operator
  Ortu
}


enum JenisKelamin {
  LakiLaki @map("Laki-Laki")
  Perempuan 
}

enum Agama {
  Islam
  Kristen
  Hindu
  Buddha
  Konghucu
}

enum Kelas {
  kelompokA @map("Kelompok A")
  kelompokB @map("Kelompok B")
}

enum Nilai {
  B
  C
  P
}

model Users {
    id  String @id @default(cuid())
    username String
    password String
    role Role @default(Operator)
    token String? @db.Text
}

model ProfilSekolah {
  id_profil_sekolah Int     @id @default(autoincrement())
  nama_sekolah      String  @db.VarChar(100)             
  NPSN              String?  @unique @db.VarChar(20)       
  NSS               String? @unique @db.VarChar(20)      
  provinsi          String  @db.VarChar(50)
  kabupaten         String  @db.VarChar(50)
  kecamatan         String  @db.VarChar(50)
  desa              String? @db.VarChar(50)                
  jalan             String  @db.VarChar(100)
  kode_pos          String  @db.VarChar(10)             
  nomor_hp          String  @db.VarChar(15)               
  email             String  @unique @db.VarChar(100)            
  created_at        DateTime @default(now())             
  updated_at        DateTime @updatedAt                   
}

model Guru {
  id_guru         String @id @default(cuid())
  nama_guru       String @db.VarChar(25)
  NUPTK            String @db.VarChar(25)
  nama_kelas      Kelas?
  rekapNilai      RekapNilai[]  // relasi many ke RekapNila
}

model PesertaDidik {
  id_peserta_didik            String        @id
  nama_lengkap                String        @db.VarChar(50)
  nama_panggilan              String?       @db.VarChar(50)
  nis                         String?       @unique @db.VarChar(50)
  nisn                        String?       @db.VarChar(50)
  tempat_lahir                String?       @db.VarChar(50)
  tanggal_lahir               DateTime?       
  jenis_kelamin               JenisKelamin?
  agama                       Agama?
  anakKe                      Int?         
  nama_ayah                   String?       @db.VarChar(50)
  nama_ibu                    String?       @db.VarChar(50)
  nama_wali                   String?       @db.VarChar(50)
  pekerjaanAyah               String?       @db.VarChar(20)
  pekerjaanIbu                String?       @db.VarChar(20)
  jalan                       String?       @db.VarChar(50)
  desa_atau_kelurahan         String?       @db.VarChar(50)
  kecamatan                   String?       @db.VarChar(50)
  kabupaten                   String?       @db.VarChar(50)
  provinsi                    String?       @db.VarChar(50)

  rekapNilai      RekapNilai[] 
}


model TahunAjaran {
  id_tahun_ajaran   String      @id  @db.VarChar(25)
  tahun_ajaran      String      @unique
  semester          Semester[] // relasi one-to-many
  rekapNilai        RekapNilai[] // relasi one-to-many ke RekapNilai
}

model Semester {
  id_semester      String      @id @default(uuid())
  nama            String
  tahunAjaranId   String
  tahunAjaran     TahunAjaran @relation(fields: [tahunAjaranId], references: [id_tahun_ajaran], onDelete: Cascade, onUpdate: Cascade)
  rekapNilai      RekapNilai[]
  @@unique([nama, tahunAjaranId])
}

model RekapNilai {
  id_rekap_nilai             String           @id
  pesertaDidikId             String
  tahunAjaranId              String
  guruId                     String
  semesterId                 String
  
  pesertaDidik               PesertaDidik   @relation(fields: [pesertaDidikId], references: [id_peserta_didik], onDelete: Cascade, onUpdate: Cascade)
  tahunAjaran                TahunAjaran    @relation(fields: [tahunAjaranId], references: [id_tahun_ajaran], onDelete: Restrict, onUpdate: Cascade)
  semester                   Semester     @relation(fields: [semesterId], references: [id_semester], onDelete: Cascade, onUpdate: Cascade)
  guru                       Guru           @relation(fields: [guruId], references: [id_guru], onDelete: Restrict, onUpdate: Cascade)

  penilaian     Penilaian[]
  kesimpulan       Kesimpulan?

  @@unique([pesertaDidikId, semesterId])
}

model Kategori {
  id_kategori     Int  @id  @default(autoincrement())
  nama_kategori   String   @db.VarChar(50)
  subKategori     SubKategori[]
}

model SubKategori {
  id_sub_kategori     Int  @id  @default(autoincrement())
  nama_sub_kategori   String  @db.VarChar(100)
  kategoriId          Int 
  kategori            Kategori @relation(fields: [kategoriId], references: [id_kategori], onDelete: Cascade, onUpdate: Cascade)
  indikator           Indikator[]
}

model Indikator {
  id_indikator        Int @id @default(autoincrement())
  nama_indikator      String
  subKategoriId       Int
  subKategori         SubKategori  @relation(fields: [subKategoriId], references: [id_sub_kategori], onDelete: Cascade, onUpdate: Cascade)
  penilaian           Penilaian[]
}

model Penilaian {
  id_penilaian  String @id
  nilai         Nilai?
  rekapNilaiId  String
  indikatorId   Int
  indikator     Indikator @relation(fields: [indikatorId], references: [id_indikator])
  rekapNilai    RekapNilai @relation(fields: [rekapNilaiId], references: [id_rekap_nilai], onDelete: Cascade, onUpdate: Cascade)
  @@unique([indikatorId, rekapNilaiId])
}

model Kesimpulan {
  id_kesimpulan String @id @default(uuid())
  id_rekap_nilai String @unique
  pencapaian_perkembangan_baik String
  pencapaian_perkembangan_buruk String
  pencapaian_perkembangan_perlu_dilatih String
  saran_dan_masukan String? @db.Text
  rekapNilai    RekapNilai @relation(fields: [id_rekap_nilai], references: [id_rekap_nilai], onDelete: Cascade, onUpdate: Cascade)
}
